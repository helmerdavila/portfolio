# Provides default value for input field.
directive @default(value: JSON!) on INPUT_FIELD_DEFINITION

# Add date formatting options.
directive @dateformat(
  formatString: String
  locale: String
  fromNow: Boolean
  difference: String
) on FIELD_DEFINITION

# Link to node by foreign-key relation.
directive @link(
  by: String! = "id"
  from: String
  on: String
) on FIELD_DEFINITION

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer(
  # Don't add default resolvers to defined fields.
  noDefaultResolvers: Boolean
) on OBJECT

# Do not infer field types from field values.
directive @dontInfer(
  # Don't add default resolvers to defined fields.
  noDefaultResolvers: Boolean
) on OBJECT

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# Define parent-child relations between types. This is used to add `child*` or `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []

  # Specifies whether a parent can have multiple children of this type or not.
  many: Boolean! = false
) on OBJECT

# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

type Query {
  file(
    sourceInstanceName: StringQueryOperatorInput
    absolutePath: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    size: IntQueryOperatorInput
    prettySize: StringQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    accessTime: DateQueryOperatorInput
    changeTime: DateQueryOperatorInput
    birthTime: DateQueryOperatorInput
    root: StringQueryOperatorInput
    dir: StringQueryOperatorInput
    base: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    name: StringQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    dev: IntQueryOperatorInput
    mode: IntQueryOperatorInput
    nlink: IntQueryOperatorInput
    uid: IntQueryOperatorInput
    gid: IntQueryOperatorInput
    rdev: IntQueryOperatorInput
    ino: FloatQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    atime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    ctime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    publicURL: StringQueryOperatorInput
    childImageSharp: ImageSharpFilterInput
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
    childMdx: MdxFilterInput
    childLocale: LocaleFilterInput
  ): File
  allFile(
    filter: FileFilterInput
    sort: FileSortInput
    skip: Int
    limit: Int
  ): FileConnection!
  directory(
    sourceInstanceName: StringQueryOperatorInput
    absolutePath: StringQueryOperatorInput
    relativePath: StringQueryOperatorInput
    extension: StringQueryOperatorInput
    size: IntQueryOperatorInput
    prettySize: StringQueryOperatorInput
    modifiedTime: DateQueryOperatorInput
    accessTime: DateQueryOperatorInput
    changeTime: DateQueryOperatorInput
    birthTime: DateQueryOperatorInput
    root: StringQueryOperatorInput
    dir: StringQueryOperatorInput
    base: StringQueryOperatorInput
    ext: StringQueryOperatorInput
    name: StringQueryOperatorInput
    relativeDirectory: StringQueryOperatorInput
    dev: IntQueryOperatorInput
    mode: IntQueryOperatorInput
    nlink: IntQueryOperatorInput
    uid: IntQueryOperatorInput
    gid: IntQueryOperatorInput
    rdev: IntQueryOperatorInput
    ino: FloatQueryOperatorInput
    atimeMs: FloatQueryOperatorInput
    mtimeMs: FloatQueryOperatorInput
    ctimeMs: FloatQueryOperatorInput
    atime: DateQueryOperatorInput
    mtime: DateQueryOperatorInput
    ctime: DateQueryOperatorInput
    birthtime: DateQueryOperatorInput
    birthtimeMs: FloatQueryOperatorInput
    blksize: IntQueryOperatorInput
    blocks: IntQueryOperatorInput
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
  ): Directory
  allDirectory(
    filter: DirectoryFilterInput
    sort: DirectorySortInput
    skip: Int
    limit: Int
  ): DirectoryConnection!
  site(
    buildTime: DateQueryOperatorInput
    siteMetadata: SiteSiteMetadataFilterInput
    port: IntQueryOperatorInput
    host: StringQueryOperatorInput
    polyfill: BooleanQueryOperatorInput
    pathPrefix: StringQueryOperatorInput
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
  ): Site
  allSite(
    filter: SiteFilterInput
    sort: SiteSortInput
    skip: Int
    limit: Int
  ): SiteConnection!
  sitePage(
    path: StringQueryOperatorInput
    component: StringQueryOperatorInput
    internalComponentName: StringQueryOperatorInput
    componentChunkName: StringQueryOperatorInput
    matchPath: StringQueryOperatorInput
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
    isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
    context: SitePageContextFilterInput
    pluginCreator: SitePluginFilterInput
    pluginCreatorId: StringQueryOperatorInput
    componentPath: StringQueryOperatorInput
  ): SitePage
  allSitePage(
    filter: SitePageFilterInput
    sort: SitePageSortInput
    skip: Int
    limit: Int
  ): SitePageConnection!
  imageSharp(
    fixed: ImageSharpFixedFilterInput
    resolutions: ImageSharpResolutionsFilterInput
    fluid: ImageSharpFluidFilterInput
    sizes: ImageSharpSizesFilterInput
    gatsbyImageData: JSONQueryOperatorInput
    original: ImageSharpOriginalFilterInput
    resize: ImageSharpResizeFilterInput
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
  ): ImageSharp
  allImageSharp(
    filter: ImageSharpFilterInput
    sort: ImageSharpSortInput
    skip: Int
    limit: Int
  ): ImageSharpConnection!
  mdx(
    rawBody: StringQueryOperatorInput
    fileAbsolutePath: StringQueryOperatorInput
    frontmatter: MdxFrontmatterFilterInput
    slug: StringQueryOperatorInput
    body: StringQueryOperatorInput
    excerpt: StringQueryOperatorInput
    headings: MdxHeadingMdxFilterListInput
    html: StringQueryOperatorInput
    mdxAST: JSONQueryOperatorInput
    tableOfContents: JSONQueryOperatorInput
    timeToRead: IntQueryOperatorInput
    wordCount: MdxWordCountFilterInput
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
  ): Mdx
  allMdx(
    filter: MdxFilterInput
    sort: MdxSortInput
    skip: Int
    limit: Int
  ): MdxConnection!
  locale(
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
    language: StringQueryOperatorInput
    ns: StringQueryOperatorInput
    data: StringQueryOperatorInput
    fileAbsolutePath: StringQueryOperatorInput
  ): Locale
  allLocale(
    filter: LocaleFilterInput
    sort: LocaleSortInput
    skip: Int
    limit: Int
  ): LocaleConnection!
  siteBuildMetadata(
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
    buildTime: DateQueryOperatorInput
  ): SiteBuildMetadata
  allSiteBuildMetadata(
    filter: SiteBuildMetadataFilterInput
    sort: SiteBuildMetadataSortInput
    skip: Int
    limit: Int
  ): SiteBuildMetadataConnection!
  sitePlugin(
    id: StringQueryOperatorInput
    parent: NodeFilterInput
    children: NodeFilterListInput
    internal: InternalFilterInput
    resolve: StringQueryOperatorInput
    name: StringQueryOperatorInput
    version: StringQueryOperatorInput
    pluginOptions: SitePluginPluginOptionsFilterInput
    nodeAPIs: StringQueryOperatorInput
    browserAPIs: StringQueryOperatorInput
    ssrAPIs: StringQueryOperatorInput
    pluginFilepath: StringQueryOperatorInput
    packageJson: SitePluginPackageJsonFilterInput
  ): SitePlugin
  allSitePlugin(
    filter: SitePluginFilterInput
    sort: SitePluginSortInput
    skip: Int
    limit: Int
  ): SitePluginConnection!
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input ImageSharpFilterInput {
  #
  fixed: ImageSharpFixedFilterInput

  #
  resolutions: ImageSharpResolutionsFilterInput

  #
  fluid: ImageSharpFluidFilterInput

  #
  sizes: ImageSharpSizesFilterInput

  #
  gatsbyImageData: JSONQueryOperatorInput

  #
  original: ImageSharpOriginalFilterInput

  #
  resize: ImageSharpResizeFilterInput

  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  #
  base64: StringQueryOperatorInput

  #
  tracedSVG: StringQueryOperatorInput

  #
  aspectRatio: FloatQueryOperatorInput

  #
  width: FloatQueryOperatorInput

  #
  height: FloatQueryOperatorInput

  #
  src: StringQueryOperatorInput

  #
  srcSet: StringQueryOperatorInput

  #
  srcWebp: StringQueryOperatorInput

  #
  srcSetWebp: StringQueryOperatorInput

  #
  originalName: StringQueryOperatorInput
}

input ImageSharpResolutionsFilterInput {
  #
  base64: StringQueryOperatorInput

  #
  tracedSVG: StringQueryOperatorInput

  #
  aspectRatio: FloatQueryOperatorInput

  #
  width: FloatQueryOperatorInput

  #
  height: FloatQueryOperatorInput

  #
  src: StringQueryOperatorInput

  #
  srcSet: StringQueryOperatorInput

  #
  srcWebp: StringQueryOperatorInput

  #
  srcSetWebp: StringQueryOperatorInput

  #
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  #
  base64: StringQueryOperatorInput

  #
  tracedSVG: StringQueryOperatorInput

  #
  aspectRatio: FloatQueryOperatorInput

  #
  src: StringQueryOperatorInput

  #
  srcSet: StringQueryOperatorInput

  #
  srcWebp: StringQueryOperatorInput

  #
  srcSetWebp: StringQueryOperatorInput

  #
  sizes: StringQueryOperatorInput

  #
  originalImg: StringQueryOperatorInput

  #
  originalName: StringQueryOperatorInput

  #
  presentationWidth: IntQueryOperatorInput

  #
  presentationHeight: IntQueryOperatorInput
}

input ImageSharpSizesFilterInput {
  #
  base64: StringQueryOperatorInput

  #
  tracedSVG: StringQueryOperatorInput

  #
  aspectRatio: FloatQueryOperatorInput

  #
  src: StringQueryOperatorInput

  #
  srcSet: StringQueryOperatorInput

  #
  srcWebp: StringQueryOperatorInput

  #
  srcSetWebp: StringQueryOperatorInput

  #
  sizes: StringQueryOperatorInput

  #
  originalImg: StringQueryOperatorInput

  #
  originalName: StringQueryOperatorInput

  #
  presentationWidth: IntQueryOperatorInput

  #
  presentationHeight: IntQueryOperatorInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

input ImageSharpOriginalFilterInput {
  #
  width: FloatQueryOperatorInput

  #
  height: FloatQueryOperatorInput

  #
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  #
  src: StringQueryOperatorInput

  #
  tracedSVG: StringQueryOperatorInput

  #
  width: IntQueryOperatorInput

  #
  height: IntQueryOperatorInput

  #
  aspectRatio: FloatQueryOperatorInput

  #
  originalName: StringQueryOperatorInput
}

input NodeFilterInput {
  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput
}

input NodeFilterListInput {
  #
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  #
  content: StringQueryOperatorInput

  #
  contentDigest: StringQueryOperatorInput

  #
  description: StringQueryOperatorInput

  #
  fieldOwners: StringQueryOperatorInput

  #
  ignoreType: BooleanQueryOperatorInput

  #
  mediaType: StringQueryOperatorInput

  #
  owner: StringQueryOperatorInput

  #
  type: StringQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input MdxFilterInput {
  #
  rawBody: StringQueryOperatorInput

  #
  fileAbsolutePath: StringQueryOperatorInput

  #
  frontmatter: MdxFrontmatterFilterInput

  #
  slug: StringQueryOperatorInput

  #
  body: StringQueryOperatorInput

  #
  excerpt: StringQueryOperatorInput

  #
  headings: MdxHeadingMdxFilterListInput

  #
  html: StringQueryOperatorInput

  #
  mdxAST: JSONQueryOperatorInput

  #
  tableOfContents: JSONQueryOperatorInput

  #
  timeToRead: IntQueryOperatorInput

  #
  wordCount: MdxWordCountFilterInput

  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput
}

input MdxFrontmatterFilterInput {
  #
  title: StringQueryOperatorInput

  #
  description: StringQueryOperatorInput

  #
  lang: StringQueryOperatorInput

  #
  date: DateQueryOperatorInput

  #
  published: BooleanQueryOperatorInput
}

input MdxHeadingMdxFilterListInput {
  #
  elemMatch: MdxHeadingMdxFilterInput
}

input MdxHeadingMdxFilterInput {
  #
  value: StringQueryOperatorInput

  #
  depth: IntQueryOperatorInput
}

input MdxWordCountFilterInput {
  #
  paragraphs: IntQueryOperatorInput

  #
  sentences: IntQueryOperatorInput

  #
  words: IntQueryOperatorInput
}

input LocaleFilterInput {
  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput

  #
  language: StringQueryOperatorInput

  #
  ns: StringQueryOperatorInput

  #
  data: StringQueryOperatorInput

  #
  fileAbsolutePath: StringQueryOperatorInput
}

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int

  # Copy file to static directory and return public url to it
  publicURL: String
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  childMdx: Mdx
  childLocale: Locale
}

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

type ImageSharp implements Node {
  fixed(
    width: Int
    height: Int
    base64Width: Int
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpFixed
  resolutions(
    width: Int
    height: Int
    base64Width: Int
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpResolutions
    @deprecated(
      reason: "Resolutions was deprecated in Gatsby v2. It's been renamed to \"fixed\" https://example.com/write-docs-and-fix-this-example-link"
    )
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  sizes(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpSizes
    @deprecated(
      reason: "Sizes was deprecated in Gatsby v2. It's been renamed to \"fluid\" https://example.com/write-docs-and-fix-this-example-link"
    )
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FLUID: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = FIXED

    # Maximum display width of generated files.
    # The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities
    # This only applies when layout = FLUID or CONSTRAINED. For other layout types, use "width"
    maxWidth: Int

    # If set, the generated image is a maximum of this height, cropping if necessary.
    # If the image layout is "constrained" then the image will be limited to this height.
    # If the aspect ratio of the image is different than the source, then the image will be cropped.
    maxHeight: Int

    # The display width of the generated image.
    # The actual largest image resolution will be this value multipled by the largest value in outputPixelDensities
    # Ignored if layout = FLUID or CONSTRAINED, where you should use "maxWidth" instead.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder = BLURRED

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Options for traced placeholder SVGs. You also should set placeholder to "SVG".
    tracedSVGOptions: Potrace

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG" and "WEBP".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat] = [WEBP]

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide
    outputPixelDensities: [Float]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String = ""

    # The default quality. This is overriden by any format-specific options
    quality: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    background: String = "rgba(0,0,0,0)"
  ): JSON!
  original: ImageSharpOriginal
  resize(
    width: Int
    height: Int
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    jpegProgressive: Boolean = true
    pngCompressionLevel: Int = 9
    pngCompressionSpeed: Int = 4
    grayscale: Boolean = false
    duotone: DuotoneGradient
    base64: Boolean = false
    traceSVG: Potrace
    toFormat: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
  ): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpResolutions {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

type ImageSharpSizes {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImageLayout {
  FIXED
  FLUID
  CONSTRAINED
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  # Width of the generated low-res preview. Default is 20px
  width: Int

  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type Mdx implements Node {
  rawBody: String!
  fileAbsolutePath: String!
  frontmatter: MdxFrontmatter
  slug: String
  body: String!
  excerpt(pruneLength: Int = 140, truncate: Boolean = false): String!
  headings(depth: HeadingsMdx): [MdxHeadingMdx]
  html: String
  mdxAST: JSON
  tableOfContents(maxDepth: Int): JSON
  timeToRead: Int
  wordCount: MdxWordCount
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type MdxFrontmatter {
  title: String!
  description: String
  lang: String
  date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  published: Boolean
}

enum HeadingsMdx {
  h1
  h2
  h3
  h4
  h5
  h6
}

type MdxHeadingMdx {
  value: String
  depth: Int
}

type MdxWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type Locale implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  language: String
  ns: String
  data: String
  fileAbsolutePath: String
}

input FileFilterInput {
  #
  sourceInstanceName: StringQueryOperatorInput

  #
  absolutePath: StringQueryOperatorInput

  #
  relativePath: StringQueryOperatorInput

  #
  extension: StringQueryOperatorInput

  #
  size: IntQueryOperatorInput

  #
  prettySize: StringQueryOperatorInput

  #
  modifiedTime: DateQueryOperatorInput

  #
  accessTime: DateQueryOperatorInput

  #
  changeTime: DateQueryOperatorInput

  #
  birthTime: DateQueryOperatorInput

  #
  root: StringQueryOperatorInput

  #
  dir: StringQueryOperatorInput

  #
  base: StringQueryOperatorInput

  #
  ext: StringQueryOperatorInput

  #
  name: StringQueryOperatorInput

  #
  relativeDirectory: StringQueryOperatorInput

  #
  dev: IntQueryOperatorInput

  #
  mode: IntQueryOperatorInput

  #
  nlink: IntQueryOperatorInput

  #
  uid: IntQueryOperatorInput

  #
  gid: IntQueryOperatorInput

  #
  rdev: IntQueryOperatorInput

  #
  ino: FloatQueryOperatorInput

  #
  atimeMs: FloatQueryOperatorInput

  #
  mtimeMs: FloatQueryOperatorInput

  #
  ctimeMs: FloatQueryOperatorInput

  #
  atime: DateQueryOperatorInput

  #
  mtime: DateQueryOperatorInput

  #
  ctime: DateQueryOperatorInput

  #
  birthtime: DateQueryOperatorInput

  #
  birthtimeMs: FloatQueryOperatorInput

  #
  blksize: IntQueryOperatorInput

  #
  blocks: IntQueryOperatorInput

  #
  publicURL: StringQueryOperatorInput

  #
  childImageSharp: ImageSharpFilterInput

  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput

  #
  childMdx: MdxFilterInput

  #
  childLocale: LocaleFilterInput
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  publicURL
  childImageSharp___fixed___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fixed___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resolutions___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___sizes
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___originalImg
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___presentationWidth
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___fluid___presentationHeight
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___sizes
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___originalImg
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___presentationWidth
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___sizes___presentationHeight
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___gatsbyImageData
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___original___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___original___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___original___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resize___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resize___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resize___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resize___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resize___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___resize___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childImageSharp___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  childMdx___rawBody
  childMdx___fileAbsolutePath
  childMdx___frontmatter___title
  childMdx___frontmatter___description
  childMdx___frontmatter___lang
  childMdx___frontmatter___date
  childMdx___frontmatter___published
  childMdx___slug
  childMdx___body
  childMdx___excerpt
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___headings
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___headings___value
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___headings___depth
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___html
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___mdxAST
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___tableOfContents
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___timeToRead
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___wordCount___paragraphs
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___wordCount___sentences
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___wordCount___words
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childMdx___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  childLocale___id
  childLocale___parent___id
  childLocale___parent___parent___id
  childLocale___parent___parent___children
  childLocale___parent___children
  childLocale___parent___children___id
  childLocale___parent___children___children
  childLocale___parent___internal___content
  childLocale___parent___internal___contentDigest
  childLocale___parent___internal___description
  childLocale___parent___internal___fieldOwners
  childLocale___parent___internal___ignoreType
  childLocale___parent___internal___mediaType
  childLocale___parent___internal___owner
  childLocale___parent___internal___type
  childLocale___children
  childLocale___children___id
  childLocale___children___parent___id
  childLocale___children___parent___children
  childLocale___children___children
  childLocale___children___children___id
  childLocale___children___children___children
  childLocale___children___internal___content
  childLocale___children___internal___contentDigest
  childLocale___children___internal___description
  childLocale___children___internal___fieldOwners
  childLocale___children___internal___ignoreType
  childLocale___children___internal___mediaType
  childLocale___children___internal___owner
  childLocale___children___internal___type
  childLocale___internal___content
  childLocale___internal___contentDigest
  childLocale___internal___description
  childLocale___internal___fieldOwners
  childLocale___internal___ignoreType
  childLocale___internal___mediaType
  childLocale___internal___owner
  childLocale___internal___type
  childLocale___language
  childLocale___ns
  childLocale___data
  childLocale___fileAbsolutePath
}

enum SortOrderEnum {
  ASC
  DESC
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

input DirectoryFilterInput {
  #
  sourceInstanceName: StringQueryOperatorInput

  #
  absolutePath: StringQueryOperatorInput

  #
  relativePath: StringQueryOperatorInput

  #
  extension: StringQueryOperatorInput

  #
  size: IntQueryOperatorInput

  #
  prettySize: StringQueryOperatorInput

  #
  modifiedTime: DateQueryOperatorInput

  #
  accessTime: DateQueryOperatorInput

  #
  changeTime: DateQueryOperatorInput

  #
  birthTime: DateQueryOperatorInput

  #
  root: StringQueryOperatorInput

  #
  dir: StringQueryOperatorInput

  #
  base: StringQueryOperatorInput

  #
  ext: StringQueryOperatorInput

  #
  name: StringQueryOperatorInput

  #
  relativeDirectory: StringQueryOperatorInput

  #
  dev: IntQueryOperatorInput

  #
  mode: IntQueryOperatorInput

  #
  nlink: IntQueryOperatorInput

  #
  uid: IntQueryOperatorInput

  #
  gid: IntQueryOperatorInput

  #
  rdev: IntQueryOperatorInput

  #
  ino: FloatQueryOperatorInput

  #
  atimeMs: FloatQueryOperatorInput

  #
  mtimeMs: FloatQueryOperatorInput

  #
  ctimeMs: FloatQueryOperatorInput

  #
  atime: DateQueryOperatorInput

  #
  mtime: DateQueryOperatorInput

  #
  ctime: DateQueryOperatorInput

  #
  birthtime: DateQueryOperatorInput

  #
  birthtimeMs: FloatQueryOperatorInput

  #
  blksize: IntQueryOperatorInput

  #
  blocks: IntQueryOperatorInput

  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: DirectoryFieldsEnum!
  ): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteSiteMetadataFilterInput {
  #
  title: StringQueryOperatorInput

  #
  description: StringQueryOperatorInput

  #
  author: StringQueryOperatorInput

  #
  siteUrl: StringQueryOperatorInput
}

type Site implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  siteUrl: String
}

input SiteFilterInput {
  #
  buildTime: DateQueryOperatorInput

  #
  siteMetadata: SiteSiteMetadataFilterInput

  #
  port: IntQueryOperatorInput

  #
  host: StringQueryOperatorInput

  #
  polyfill: BooleanQueryOperatorInput

  #
  pathPrefix: StringQueryOperatorInput

  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___title
  siteMetadata___description
  siteMetadata___author
  siteMetadata___siteUrl
  port
  host
  polyfill
  pathPrefix
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageContextFilterInput {
  #
  language: StringQueryOperatorInput

  #
  i18n: SitePageContextI18nFilterInput
}

input SitePageContextI18nFilterInput {
  #
  language: StringQueryOperatorInput

  #
  languages: StringQueryOperatorInput

  #
  defaultLanguage: StringQueryOperatorInput

  #
  generateDefaultLanguagePage: BooleanQueryOperatorInput

  #
  routed: BooleanQueryOperatorInput

  #
  originalPath: StringQueryOperatorInput

  #
  path: StringQueryOperatorInput
}

input SitePluginFilterInput {
  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput

  #
  resolve: StringQueryOperatorInput

  #
  name: StringQueryOperatorInput

  #
  version: StringQueryOperatorInput

  #
  pluginOptions: SitePluginPluginOptionsFilterInput

  #
  nodeAPIs: StringQueryOperatorInput

  #
  browserAPIs: StringQueryOperatorInput

  #
  ssrAPIs: StringQueryOperatorInput

  #
  pluginFilepath: StringQueryOperatorInput

  #
  packageJson: SitePluginPackageJsonFilterInput
}

input SitePluginPluginOptionsFilterInput {
  #
  output: StringQueryOperatorInput

  #
  createLinkInHead: BooleanQueryOperatorInput

  #
  isTSX: BooleanQueryOperatorInput

  #
  jsxPragma: StringQueryOperatorInput

  #
  allExtensions: BooleanQueryOperatorInput

  #
  name: StringQueryOperatorInput

  #
  path: StringQueryOperatorInput

  #
  base64Width: IntQueryOperatorInput

  #
  stripMetadata: BooleanQueryOperatorInput

  #
  defaultQuality: IntQueryOperatorInput

  #
  failOnError: BooleanQueryOperatorInput

  #
  short_name: StringQueryOperatorInput

  #
  start_url: StringQueryOperatorInput

  #
  background_color: StringQueryOperatorInput

  #
  theme_color: StringQueryOperatorInput

  #
  display: StringQueryOperatorInput

  #
  icon: StringQueryOperatorInput

  #
  legacy: BooleanQueryOperatorInput

  #
  theme_color_in_head: BooleanQueryOperatorInput

  #
  cache_busting_mode: StringQueryOperatorInput

  #
  crossOrigin: StringQueryOperatorInput

  #
  include_favicon: BooleanQueryOperatorInput

  #
  cacheDigest: StringQueryOperatorInput

  #
  defaultLayouts: SitePluginPluginOptionsDefaultLayoutsFilterInput

  #
  extensions: StringQueryOperatorInput

  #
  lessBabel: BooleanQueryOperatorInput

  #
  mediaTypes: StringQueryOperatorInput

  #
  root: StringQueryOperatorInput

  #
  trackingId: StringQueryOperatorInput

  #
  head: BooleanQueryOperatorInput

  #
  anonymize: BooleanQueryOperatorInput

  #
  respectDNT: BooleanQueryOperatorInput

  #
  pageTransitionDelay: IntQueryOperatorInput

  #
  fonts: StringQueryOperatorInput

  #
  host: StringQueryOperatorInput

  #
  sitemap: StringQueryOperatorInput

  #
  policy: SitePluginPluginOptionsPolicyFilterListInput

  #
  localeJsonSourceName: StringQueryOperatorInput

  #
  languages: StringQueryOperatorInput

  #
  defaultLanguage: StringQueryOperatorInput

  #
  i18nextOptions: SitePluginPluginOptionsI18nextOptionsFilterInput

  #
  pages: SitePluginPluginOptionsPagesFilterListInput

  #
  pathCheck: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsDefaultLayoutsFilterInput {
  #
  default: StringQueryOperatorInput
}

input SitePluginPluginOptionsPolicyFilterListInput {
  #
  elemMatch: SitePluginPluginOptionsPolicyFilterInput
}

input SitePluginPluginOptionsPolicyFilterInput {
  #
  userAgent: StringQueryOperatorInput

  #
  allow: StringQueryOperatorInput
}

input SitePluginPluginOptionsI18nextOptionsFilterInput {
  #
  interpolation: SitePluginPluginOptionsI18nextOptionsInterpolationFilterInput

  #
  keySeparator: BooleanQueryOperatorInput

  #
  nsSeparator: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsI18nextOptionsInterpolationFilterInput {
  #
  escapeValue: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsPagesFilterListInput {
  #
  elemMatch: SitePluginPluginOptionsPagesFilterInput
}

input SitePluginPluginOptionsPagesFilterInput {
  #
  matchPath: StringQueryOperatorInput

  #
  getLanguageFromPath: BooleanQueryOperatorInput
}

input SitePluginPackageJsonFilterInput {
  #
  name: StringQueryOperatorInput

  #
  description: StringQueryOperatorInput

  #
  version: StringQueryOperatorInput

  #
  main: StringQueryOperatorInput

  #
  author: StringQueryOperatorInput

  #
  license: StringQueryOperatorInput

  #
  dependencies: SitePluginPackageJsonDependenciesFilterListInput

  #
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput

  #
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput

  #
  keywords: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  #
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDependenciesFilterInput {
  #
  name: StringQueryOperatorInput

  #
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  #
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  #
  name: StringQueryOperatorInput

  #
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  #
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  #
  name: StringQueryOperatorInput

  #
  version: StringQueryOperatorInput
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  isCreatedByStatefulCreatePages: Boolean
  context: SitePageContext
  pluginCreator: SitePlugin
  pluginCreatorId: String
  componentPath: String
}

type SitePageContext {
  language: String
  i18n: SitePageContextI18n
}

type SitePageContextI18n {
  language: String
  languages: [String]
  defaultLanguage: String
  generateDefaultLanguagePage: Boolean
  routed: Boolean
  originalPath: String
  path: String
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginPluginOptions {
  output: String
  createLinkInHead: Boolean
  isTSX: Boolean
  jsxPragma: String
  allExtensions: Boolean
  name: String
  path: String
  base64Width: Int
  stripMetadata: Boolean
  defaultQuality: Int
  failOnError: Boolean
  short_name: String
  start_url: String
  background_color: String
  theme_color: String
  display: String
  icon: String
  legacy: Boolean
  theme_color_in_head: Boolean
  cache_busting_mode: String
  crossOrigin: String
  include_favicon: Boolean
  cacheDigest: String
  defaultLayouts: SitePluginPluginOptionsDefaultLayouts
  extensions: [String]
  lessBabel: Boolean
  mediaTypes: [String]
  root: String
  trackingId: String
  head: Boolean
  anonymize: Boolean
  respectDNT: Boolean
  pageTransitionDelay: Int
  fonts: [String]
  host: String
  sitemap: String
  policy: [SitePluginPluginOptionsPolicy]
  localeJsonSourceName: String
  languages: [String]
  defaultLanguage: String
  i18nextOptions: SitePluginPluginOptionsI18nextOptions
  pages: [SitePluginPluginOptionsPages]
  pathCheck: Boolean
}

type SitePluginPluginOptionsDefaultLayouts {
  default: String
}

type SitePluginPluginOptionsPolicy {
  userAgent: String
  allow: String
}

type SitePluginPluginOptionsI18nextOptions {
  interpolation: SitePluginPluginOptionsI18nextOptionsInterpolation
  keySeparator: Boolean
  nsSeparator: Boolean
}

type SitePluginPluginOptionsI18nextOptionsInterpolation {
  escapeValue: Boolean
}

type SitePluginPluginOptionsPages {
  matchPath: String
  getLanguageFromPath: Boolean
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  author: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

input SitePageFilterInput {
  #
  path: StringQueryOperatorInput

  #
  component: StringQueryOperatorInput

  #
  internalComponentName: StringQueryOperatorInput

  #
  componentChunkName: StringQueryOperatorInput

  #
  matchPath: StringQueryOperatorInput

  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput

  #
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput

  #
  context: SitePageContextFilterInput

  #
  pluginCreator: SitePluginFilterInput

  #
  pluginCreatorId: StringQueryOperatorInput

  #
  componentPath: StringQueryOperatorInput
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  isCreatedByStatefulCreatePages
  context___language
  context___i18n___language
  context___i18n___languages
  context___i18n___defaultLanguage
  context___i18n___generateDefaultLanguagePage
  context___i18n___routed
  context___i18n___originalPath
  context___i18n___path
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___output
  pluginCreator___pluginOptions___createLinkInHead
  pluginCreator___pluginOptions___isTSX
  pluginCreator___pluginOptions___jsxPragma
  pluginCreator___pluginOptions___allExtensions
  pluginCreator___pluginOptions___name
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___base64Width
  pluginCreator___pluginOptions___stripMetadata
  pluginCreator___pluginOptions___defaultQuality
  pluginCreator___pluginOptions___failOnError
  pluginCreator___pluginOptions___short_name
  pluginCreator___pluginOptions___start_url
  pluginCreator___pluginOptions___background_color
  pluginCreator___pluginOptions___theme_color
  pluginCreator___pluginOptions___display
  pluginCreator___pluginOptions___icon
  pluginCreator___pluginOptions___legacy
  pluginCreator___pluginOptions___theme_color_in_head
  pluginCreator___pluginOptions___cache_busting_mode
  pluginCreator___pluginOptions___crossOrigin
  pluginCreator___pluginOptions___include_favicon
  pluginCreator___pluginOptions___cacheDigest
  pluginCreator___pluginOptions___defaultLayouts___default
  pluginCreator___pluginOptions___extensions
  pluginCreator___pluginOptions___lessBabel
  pluginCreator___pluginOptions___mediaTypes
  pluginCreator___pluginOptions___root
  pluginCreator___pluginOptions___trackingId
  pluginCreator___pluginOptions___head
  pluginCreator___pluginOptions___anonymize
  pluginCreator___pluginOptions___respectDNT
  pluginCreator___pluginOptions___pageTransitionDelay
  pluginCreator___pluginOptions___fonts
  pluginCreator___pluginOptions___host
  pluginCreator___pluginOptions___sitemap
  pluginCreator___pluginOptions___policy
  pluginCreator___pluginOptions___policy___userAgent
  pluginCreator___pluginOptions___policy___allow
  pluginCreator___pluginOptions___localeJsonSourceName
  pluginCreator___pluginOptions___languages
  pluginCreator___pluginOptions___defaultLanguage
  pluginCreator___pluginOptions___i18nextOptions___keySeparator
  pluginCreator___pluginOptions___i18nextOptions___nsSeparator
  pluginCreator___pluginOptions___pages
  pluginCreator___pluginOptions___pages___matchPath
  pluginCreator___pluginOptions___pages___getLanguageFromPath
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___author
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
  componentPath
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: SitePageFieldsEnum!
  ): [SitePageGroupConnection!]!
}

type SitePageEdge {
  #
  next: SitePage
  node: SitePage!

  #
  previous: SitePage
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum ImageSharpFieldsEnum {
  fixed___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fixed___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resolutions___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___sizes
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___originalImg
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___presentationWidth
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  fluid___presentationHeight
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___base64
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___srcSet
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___srcWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___srcSetWebp
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___sizes
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___originalImg
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___presentationWidth
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  sizes___presentationHeight
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  gatsbyImageData
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  original___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  original___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  original___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resize___src
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resize___tracedSVG
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resize___width
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resize___height
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resize___aspectRatio
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  resize___originalName
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: ImageSharpFieldsEnum!
  ): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input MdxSortInput {
  fields: [MdxFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum MdxFieldsEnum {
  rawBody
  fileAbsolutePath
  frontmatter___title
  frontmatter___description
  frontmatter___lang
  frontmatter___date
  frontmatter___published
  slug
  body
  excerpt
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  headings
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  headings___value
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  headings___depth
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  html
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  mdxAST
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  tableOfContents
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  timeToRead
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  wordCount___paragraphs
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  wordCount___sentences
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  wordCount___words
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___parent___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___parent___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___parent___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___children___id
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___children___children
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  children___internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___content
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___contentDigest
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___description
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___fieldOwners
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___ignoreType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___mediaType
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___owner
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
  internal___type
    @deprecated(
      reason: "Sorting on fields that need arguments to resolve is deprecated."
    )
}

type MdxConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  distinct(field: MdxFieldsEnum!): [String!]!
  group(skip: Int, limit: Int, field: MdxFieldsEnum!): [MdxGroupConnection!]!
}

type MdxEdge {
  next: Mdx
  node: Mdx!
  previous: Mdx
}

type MdxGroupConnection {
  totalCount: Int!
  edges: [MdxEdge!]!
  nodes: [Mdx!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input LocaleSortInput {
  fields: [LocaleFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum LocaleFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  language
  ns
  data
  fileAbsolutePath
}

type LocaleConnection {
  totalCount: Int!
  edges: [LocaleEdge!]!
  nodes: [Locale!]!
  pageInfo: PageInfo!
  distinct(field: LocaleFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: LocaleFieldsEnum!
  ): [LocaleGroupConnection!]!
}

type LocaleEdge {
  next: Locale
  node: Locale!
  previous: Locale
}

type LocaleGroupConnection {
  totalCount: Int!
  edges: [LocaleEdge!]!
  nodes: [Locale!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

type SiteBuildMetadata implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

input SiteBuildMetadataFilterInput {
  #
  id: StringQueryOperatorInput

  #
  parent: NodeFilterInput

  #
  children: NodeFilterListInput

  #
  internal: InternalFilterInput

  #
  buildTime: DateQueryOperatorInput
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SiteBuildMetadataFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  buildTime
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: SiteBuildMetadataFieldsEnum!
  ): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___output
  pluginOptions___createLinkInHead
  pluginOptions___isTSX
  pluginOptions___jsxPragma
  pluginOptions___allExtensions
  pluginOptions___name
  pluginOptions___path
  pluginOptions___base64Width
  pluginOptions___stripMetadata
  pluginOptions___defaultQuality
  pluginOptions___failOnError
  pluginOptions___short_name
  pluginOptions___start_url
  pluginOptions___background_color
  pluginOptions___theme_color
  pluginOptions___display
  pluginOptions___icon
  pluginOptions___legacy
  pluginOptions___theme_color_in_head
  pluginOptions___cache_busting_mode
  pluginOptions___crossOrigin
  pluginOptions___include_favicon
  pluginOptions___cacheDigest
  pluginOptions___defaultLayouts___default
  pluginOptions___extensions
  pluginOptions___lessBabel
  pluginOptions___mediaTypes
  pluginOptions___root
  pluginOptions___trackingId
  pluginOptions___head
  pluginOptions___anonymize
  pluginOptions___respectDNT
  pluginOptions___pageTransitionDelay
  pluginOptions___fonts
  pluginOptions___host
  pluginOptions___sitemap
  pluginOptions___policy
  pluginOptions___policy___userAgent
  pluginOptions___policy___allow
  pluginOptions___localeJsonSourceName
  pluginOptions___languages
  pluginOptions___defaultLanguage
  pluginOptions___i18nextOptions___interpolation___escapeValue
  pluginOptions___i18nextOptions___keySeparator
  pluginOptions___i18nextOptions___nsSeparator
  pluginOptions___pages
  pluginOptions___pages___matchPath
  pluginOptions___pages___getLanguageFromPath
  pluginOptions___pathCheck
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___author
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  group(
    skip: Int
    limit: Int
    field: SitePluginFieldsEnum!
  ): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

